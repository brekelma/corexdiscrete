{
  "id": "fef081cf-9468-3086-9891-e54d2bca75db",
  "name": "dsbox.corexdiscrete.corex_discrete.CorexDiscrete",
  "common_name": "DSBox Corex Discrete",
  "description": "Return components/latent factors that explain the most multivariate mutual information in the data. For comparison, PCA returns components explaining the most variance in the data.  Serves as DSBox wrapper for https://github.com/gregversteeg/bio_corex",
  "languages": [
    "python2.7", "python3.5"
  ],
  "library": "dsbox.corexdiscrete",
  "version": "0.1.8",
  "source_code": "https://github.com/brekelma/corexdiscrete.git",
  "is_class": true,
  "attributes": [
    {
      "shape": "n_hidden, n_samples",
      "type": "array",
      "name": "latent_factors",
      "description": "Label (i.e. highest probability value) of each hidden unit for each sample.  Note, hidden units are binary by default, so label in {0,1}."
    },
    {
      "type": "dsbox.corexdiscrete.corexdiscrete.corex.Corex",
      "name": "model",
      "description": "Bio_corex model (see https://github.com/gregversteeg/bio_corex)."
    },
    {
      "type": "bool",
      "name": "fitted",
      "description": "Whether model has been fit."
    }
  ],
  "parameters": [
    {
      "type": "int",
      "name": "n_hidden",
      "description": "Number of components or latent factors to use. Default n_hidden is max(1, .2 * #columns).",
      "is_hyperparameter": true
    },
        {
      "type": "float",
      "name": "latent_pct",
      "description": "Instead of n_hidden, specify % of # columns as latent dimension.  Default n_hidden is max(1, .2 * #columns).",
      "is_hyperparameter": true
    },
    {
      "type": "int",
      "name": "dim_hidden",
      "description": "Each hidden unit can take dim_hidden discrete values.  Default binary.  Not recommended to adjust due to change in output from matrix to tensor (consider adding more factors).",
      "is_hyperparameter": false
    },
    {
      "type": "",
      "name": "missing_values",
      "description": "Input a value, with type matching the data, of observations to be treated as missing values.",
      "is_hyperparameter": false
    },
    {
      "type": "int",
      "name": "max_iter",
      "description": "Maximum number of iterations taken for the solvers to converge. ",
      "is_hyperparameter": false
    },
    {
      "type": "int",
      "name": "n_repeat",
      "description": "Run n times and return best model.",
      "is_hyperparameter": false
    },
    {
      "type": "int",
      "name": "n_cpu",
      "description": "Computational resources... None will detect. ",
      "is_hyperparameter": false
    },
    {
      "type": "bool",
      "name": "smooth_marginals",
      "description": "Less noisy estimation of marginal distributions.  Default True",
      "is_hyperparameter": false
    },
    {
      "type": "int",
      "name": "seed",
      "description": "The seed of the pseudo random number generator to use. ",
      "is_hyperparameter": false
    },
    {
      "type": "int",
      "name": "verbose",
      "description": "Set true for verbose output or >1 to get even more verbosity.",
      "is_hyperparameter": false
    }
  ],
"methods_available": [
    {
      "name": "fit",
      "id": "dsbox.corexdiscrete.corex_discrete.CorexDiscrete.fit",
      "description": "'Fit the model according to the given training data.\n",
      "returns": {
        "type": "object",
        "name": "self",
        "description": "Returns self. '"
        },
      "parameters": [
        {
          "shape": "n_samples, n_features",
          "type": "array-like, sparse matrix",
          "name": "inputs",
          "description": "Training vector, where n_samples is the number of samples and n_features is the number of features. ",
          "is_hyperparameter": false
        }
        ]
    },
    {
      "name": "produce",
      "id": "dsbox.corexdiscrete.corex_discrete.CorexDiscrete.produce",
      "description": "'Transform data according to learned model.\n",
      "returns": {
        "type": "array-like",
        "shape": "n_samples, n_hidden",
        "name": "latent_factors",
        "description": "Returns latent factors/components for each sample. '"
      },
      "parameters": [
        {
          "shape": "n_samples, n_features",
          "type": "array-like, sparse matrix",
          "name": "inputs",
          "description": "Training vector, where n_samples is the number of samples and n_features is the number of features. ",
          "is_hyperparameter": false
        }
        ]
      }, 
      {
      "name": "set_training_data",
      "id": "dsbox.corexdiscrete.corex_discrete.CorexDiscrete.set_training_data",
      "description": "Add training data.\n",
      "returns": {
        "type": "object",
        "name": "self",
        "description": "Returns self. '"
        },
      "parameters": [
        {
          "shape": "n_samples, n_features ",
          "type": "array-like, sparse matrix",
          "name": "inputs",
          "description": "Training vector of raw text.  Method automatically includes sklearn Tfidf preprocessing into bag of words.",
          "is_hyperparameter": false
        }
        ]
      },
      {
      "name": "set_params",
      "id": "dsbox.corexdiscrete.corex_discrete.CorexDiscrete.set_params",
      "description": "Set latent factors.\n",
      "returns": {
        "type": "object",
        "name": "self",
        "description": "Returns self. '"
        },
      "parameters": [
        {
          "type": "NamedTuple",
          "name": "params",
          "description": "Params object with 'latent_factors' : np.ndarray = (n_documents, n_hidden) setting the latent representation.",
          "is_hyperparameter": false
        }
        ]
      },
      {
      "name": "get_params",
      "id": "dsbox.corexdiscrete.corex_discrete.CorexDiscrete.get_params",
      "description": "Get latent factors.\n",
      "returns": {
        "type": "Params",
        "name": "params",
        "description": "Params NamedTuple with 'latent_factors' : np.ndarray = (n_samples, n_hidden) setting the latent representation."
        },
      "parameters": []
      }
    ],
  "algorithm_type": ["Dimensionality Reduction"],
  "learning_type": ["Unsupervised learning"],
  "task_type": ["Feature extraction"],
  "tags": [
    "factor analysis"
  ],
  "is_deterministic": false,
  "handles_classification": false,
  "handles_regression": false,
  "handles_multiclass": false,
  "handles_multilabel": false,
  "input_type": [
    "DENSE",
    "SPARSE"
  ],
  "output_type": [
    "FEATURES"
  ],
  "team": "ISI",
  "schema_version": 1.0,
  "build": [{
    "type": "pip",
    "package": "corexdiscrete"
  }],
  "compute_resources": {
    "sample_size": [100, 100000],
    "sample_unit": ["MB", "MB"],
    "num_nodes": [1, 1],
    "cores_per_node": [4, 4],
    "gpus_per_node": [0, 0],
    "mem_per_node": [1, 1000],
    "disk_per_node": [1, 1000],
    "mem_per_gpu": [0, 0],
    "expected_running_time": [1, 1]
  },
  "interface_type": "dimensionality_reduction"
}
